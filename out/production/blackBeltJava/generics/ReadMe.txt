Две основные причины существования Generics (было добавлено в Java SE 5.0):
1. Type safe (типобезопасность)
Позволяет создавать коллекции, которые содержат определённые элементы и на уровне компиляции исключать ошибки.
Выявить ошибки на уровне Compile time намного лучше, чем ошибки выявленные на уровне Runtime!;

2. Reusable Code (повторное использование кода)
Дженерики позволяют не создавать похожие классы, похожие методы для работы с коллекциями с разными элементами;

List <Type> nameList - под именем "nameList" хранятся объекты типа "Type" и работать можно только с этим типом;

Всегда необходимо ставить символ "Diamond" (<>) иначе это "Raw type" (сырой тип или не параметризированный объект);

Type placeholder:
    <E> - элементы;
    <K> - ключи;
    <V> - значения;

Parameterized method - это методы, которые содержат в параметр-листе дженерики.
Дженерик методы очень полезны для написания методов, которые нужны и будут использоваться очень широким спектром типов данных.
При этом функциональность этого метода для всех типов должна быть одинакова.
К примеру, у Collections очень много дженерик-методов.

TYPE ERASURE (стирание типов) - т.к. дженерики появились в Java 5, нужно было поддерживать обратную совместимость (backward compatibility)
Это означает, что код который использует дженерикс должен нормально раоатать с кодом, который не использует дженериксы
