package regex;

import java.util.regex.Pattern;

/*
Задание-пример.
Необходимо написать метод, который будет проверять подлинность IP. Т.е. метод, который "прогоняет" IP через
шаблон, который необходимо написать с помощью регулярного выражения. Необходимо считать, что IP корректен,
если он состоит из 4-х частей (из 4-х чисел) разделенных точкой (числа находятся в интервале от 0 до 255).
Если на вход метода поступает что-то такое: 0-255.0-255.0-255.0-255, то IP корректен, иначе - нет.

Первое и самое сложное в этой задаче - создание необходимого шаблона.
Шаблон будет выглядеть следующим образом:

        "(([01]?\\d?\\d|2[0-4]\\d|25[0-5])(\\.)){3}([01]?\\d?\\d|2[0-4]\\d|25[0-5])"

Как он читается?
Для лучшего понимания это выражение лучше разделить на несколько частей.
Часть №1:
        "(   ([01]?\\d?\\d      |       2[0-4]\\d       |       25[0-5])        (\\.)   )   {3}
Часть №2:
        ([01]?\\d?\\d|2[0-4]\\d|25[0-5])"

В первой части (и во второй тоже) идет разделение диапазонов двумя or:
        "(   ([01]?\\d?\\d      |       2[0-4]\\d       |      25[0-5])         (\\.)   )   {3}
                                or                      or
Т.к. корректный IP адрес состоит из 4-х чисел в диапазоне от 0 до 255, то этот диапазон и нужно указать в шаблоне.
Диапазон от 0 до 255 в шаблоне разбит на 3-и диапазона:

        "(      ([01]?\\d?\\d       |      2[0-4]\\d     |      25[0-5])        (\\.)   )   {3}
              1-ый: от 0 до 199      2-ой: от 200 до 249   3-ий: от 250 до 255

1-ый ([01]?\\d?\\d): [01]? - если число состоит из 3-х цифр, то это число может начинаться с 0 или с 1. Знак "?" -
                     "говорит" о том, что число может быть и двузначным (0ХХ, 1ХХ, а может ХХ);
                     \\d? - число может быть двузначным и его диапазон от 0 до 99, а может и не быть (для этого указан
                     знак "?");
                     \\d - но все равно, одна цифра от 0 до 9 обязательно должна быть;
                     Диапазон от 0 до 199.
                     [01]?                      \\d?                              \\d
                     0 или 1 или вовсе нет    цифра от 0 до 9 или вовсе нет    обязательное присутствие цифры от 0 до 9
2-ой (2[0-4]\\d):    2 - обязательно идет цифра 2;
                     [0-4] - потом идет одна цифра от 0 до 4;
                     \\d - и в конце любая цифра от 0 до 9;
                     Диапазон от 200 до 249;
3-ий (25[0-5]):      25 - обязательно идет число 25;
                     [0-5] - любая цифра из диапазона от 0 до 5;
                     Диапазон от 250 до 255;

        "(      ([01]?\\d?\\d       |      2[0-4]\\d     |      25[0-5])        (\\.)   )   {3}
Далее идет точка - (\\.)
В фигурных скобках цифра 3 "говорит", что должно повторится три раза число из диапазона от 0 до 255 с точкой в конце
каждого числа. Т.е. вот эта часть "0-255.0-255.0-255." готова. А дальше все то же самое, только в конце выражения не
ставится точка.

Далее при помощи метода matches класса Pattern можно будет сверить текст (IP) с шаблоном регулярного выражения. Метод
matches возвращает boolean значение.

Код:

public class IPCheckExample {
    static void checkIP(String ip) {
        String regex = "(([01]?\\d?\\d|2[0-4]\\d|25[0-5])(\\.)){3}" +
                "([01]?\\d?\\d|2[0-4]\\d|25[0-5])";
        System.out.println(ip + " is OK? " + Pattern.matches(regex, ip));
    }
    public static void main(String[] args) {
        String ip1 = "255.38.192.99";
        String ip2 = "182.262.91.05";
        checkIP(ip1);
        checkIP(ip2);
    }
}

Запуск программы. Вывод на экран:
255.38.192.99 is OK? true
182.262.91.05 is OK? false

 */
public class IPCheckExample {
    static void checkIP(String ip) {
        String regex = "(([01]?\\d?\\d|2[0-4]\\d|25[0-5])(\\.)){3}" +
                "([01]?\\d?\\d|2[0-4]\\d|25[0-5])";
        System.out.println(ip + " is OK? " + Pattern.matches(regex, ip));
    }
    public static void main(String[] args) {
        String ip1 = "255.38.192.99";
        String ip2 = "182.262.91.05";
        checkIP(ip1);
        checkIP(ip2);
    }
}