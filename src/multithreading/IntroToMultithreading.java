package multithreading;

public class IntroToMultithreading {
    public static void main(String[] args) {

        System.out.println("Hello!");

        for(int i = 0; i < 10; i++) {
            System.out.println(i);
        }

        System.out.println("Goodbye!");
        // Вывод:
        // Hello!
        // 0
        // 1
        // 2
        // 3
        // 4
        // 5
        // 6
        // 7
        // 8
        // 9
        // Goodbye!
        /*
        В коде выше выполняется все последовательно, т.е. однопоточно. Этот поток создается
        автоматически и написанные инструкции (код) выполняется последовательно.
        Перед тем, чтобы выполнилась эта инструкция (конечная):
            System.out.println("Goodbye!");
        она ждала, чтобы выполнилась эта инструкция:
            System.out.println("Hello!");
        Затем эта инструкция:
            for(int i = 0; i < 10; i++) {
                    System.out.println(i);
                }

        Многопоточность - это принцип построения программы, при котором несколько блоков кода
        могут выполняться одновременно.
        */

        /*
        Пример на "кошках".
        Если необходимо посчитать сумму чисел, к примеру, от 1 до 1_000 и нет знания формулы ( (N(N+1))/2 ),
        которая посчитает сумму этих числе, можно все эти числа прибавлять друг к другу.
        На это потребуется 999 операций сложения.
        Если разделить эту задачу на 4-е подзадачи, то:
        1. будет вычислять сумму чисел от 1 до 250;
        2. будет вычислять сумму чисел от 251 до 500;
        3. будет вычислять сумму чисел от 501 до 750;
        4. будет вычислять сумму чисел от 751 до 1_000;
        выполнить это задание получится гораздо быстрее. Все эти 4-е потока будут одновременно работать,
        выдадут какой-то результат и в итоге будет получен конечный результат путем сложения
        результатов этих 4-х подзадач.

        У многопоточности основные цели всего две:
        1. Производительность. В данном случае, если будет огромное число, то гораздо быстрее будет получен
        результат используя 4-е потока, нежели всего 1 поток. НО это не самая главная цель. К примеру,
        вы совершаете пробежку, слушаете музыку и смотрите на море (одновременно выполняются три действия).
        Тут никакая скорость работы не важна, здесь важна параллельная работа всех функций. Так же работает
        почти любая программа, например, Microsoft Word. Когда что-то пишется, в этот же момент Microsoft Word
        проверяет орфографию к примеру, дает какие-то подсказки, происходит автосохранение, через определенный
        промежуток времени (если включена эта опция) и тд. В этом случае никакая производительность не нужна
        просто нужно, чтобы определенные процессы выполнялись параллельно. Если бы было все в одном потоке в
        Microsoft Word, т.е. работало последовательно, то у пользователя, который работает в Microsoft Word, каждый раз
        Microsoft Word тормозил бы после набора каждого слова (набрал слово, потом Microsoft Word
        проверяет орфографию, дает какую-то подсказку, производит автосохранение и только после этого можно
        написать второе слово и тд.). Выходи Microsoft Word подвисал бы всякий раз, когда печатался бы текс.
        Естественно пользователя это бы не устроило поэтому, почти везде используется многопоточность.

        2. Concurrency (с англ. параллелизм) - это основная цель, выполнение сразу нескольких задач.

        В компьютерах есть процессоры, которые могут быть одноядерными (прошлый век, редко где используются)
        или многоядерными.
        Как работает многоядерный процессор при решении задачи с использованием многопоточности можно представить
        на примере, который был описан выше с подсчетом суммы чисел от 1 до 1_000:
        Разделяется задача на 4-е подзадачи:
        1. ядро №1 будет вычислять сумму чисел от 1 до 250;
        2. ядро №2 будет вычислять сумму чисел от 251 до 500;
        3. ядро №3 будет вычислять сумму чисел от 501 до 750;
        4. ядро №4 будет вычислять сумму чисел от 751 до 1_000;
        Время, затраченное на суммирование этих числе будет гораздо меньше того времени, если запускать
        в одном потоке.
        Примерно так работает многоядерный процессор.
        Если же не использовать многопоточность, то все возможности многоядерного процессора не будут использованы.
        Всегда будет использоваться одно ядро.

        Многопоточность в одноядерных процессорах достигается благодаря технологии Context switch. Процессор
        выполняет одну задачу, к примеру, выполнять суммирование от 1 до 250, на каком-то этапе останавливается,
        запоминает всю необходимую информацию, переключается на выполнение следующей задачи, к примеру,
        начинает выполнять суммирование от 251 до 500. Снова, на каком-то этапе останавливается, запоминает
        всю необходимую информацию, переключается на выполнение следующей задачи, к примеру, начинает выполнять
        суммирование от 501 до 750, затем снова останавливается и может продолжить суммирование от 1 до 250,
        а может переключиться на выполнение следующей задачи, к примеру, начать
        выполнять суммирование от 751 до 1_000, затем снова останавливается и может продолжить суммирование
        от 1 до 250, а может продолжить суммирование от 501 до 750 или от 251 до 500 и тд. Т.е. постоянно
        переключается между заданиями. Ядро одно, и оно может выполнять одно какое-то действие в один момент времени.
        Это происходит очень быстро, поэтому создается иллюзия того, что работа идет одновременно. Ведь
        время переключения процессора между всеми задачами очень быстрое и все это время эти потоки "борются"
        за процессорное время. Но нужно понимать, что перевод с обработки с одного потока на другой процессору
        тоже нужно время. Поэтому скорость выполнения работы одноядерного процессора с применением многопоточности
        будет ниже, чем если использовался один поток, т.к. не тратится время на переключение между потоками.
        Еще такой важный нюанс:
        Если будет необходимо создать четыре потока, которые будут выполнять действия как в примере выше в многоядерном
        процессоре, то не факт, что будут использоваться четыре ядра. Возможно случится так, что это все обработается
        тоже одним ядром используя технологию Context switch.
        Еще раз, многопоточность используется почти везде, когда работа происходит за компьютером, можно слушать музыку,
        смотреть видео одновременно работать в Microsoft Word, играть в игру. Это все многопоточность.
        */

    }
}